name: ApiVeritas Contract Tests (Mock Mode + R2 Controlled Upload)

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  contract-test:
    runs-on: ubuntu-latest

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_KEY }}
      AWS_DEFAULT_REGION: auto
      R2_BUCKET: ${{ secrets.R2_BUCKET }}
      R2_ENDPOINT: ${{ secrets.R2_ENDPOINT }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci

      - name: Enable mock server mode in config.json
        run: |
          jq '.enableMockServer = true' src/config/config.json > temp && mv temp src/config/config.json

      - name: Build TypeScript
        run: npm run build

      - name: Install AWS CLI
        run: |
          pip install --upgrade pip
          pip install awscli

      - name: Start Mock Server
        run: npm run start:mock &

      - name: Run ApiVeritas config
        run: npx apiveritas config

      - name: Run ApiVeritas test (generates new local payload)
        run: npx apiveritas test --tests mock.json

      - name: Find latest payload folder
        id: find_payload
        run: |
          echo "Finding latest payload folder..."
          latest_folder=$(ls -td payloads/* | head -n 1)
          echo "Latest folder: $latest_folder"
          echo "folder=$latest_folder" >> $GITHUB_OUTPUT

      - name: Check if payload exists in R2
        id: check_r2
        run: |
          echo "Checking if R2 already has a payload for mock..."
          if aws s3 ls s3://$R2_BUCKET/mock/ --endpoint-url $R2_ENDPOINT | grep -q ".json"; then
            echo "Payload exists in R2."
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "Payload does not exist in R2."
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload new payloads to R2
        if: steps.check_r2.outputs.exists == 'false'
        run: |
          echo "Uploading payloads to R2..."
          aws s3 cp "${{ steps.find_payload.outputs.folder }}/mock/" "s3://$R2_BUCKET/mock/" \
            --recursive --endpoint-url $R2_ENDPOINT
