name: ApiVeritas Contract Tests Full Run

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  contract-test:
    runs-on: ubuntu-latest

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_KEY }}
      AWS_DEFAULT_REGION: auto
      R2_BUCKET: ${{ secrets.R2_BUCKET }}
      R2_ENDPOINT: ${{ secrets.R2_ENDPOINT }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci

      - name: Build TypeScript
        run: npm run build

      - name: Link APIVERITAS with npm
        run: npm link

      - name: Initialise apiveritas folder structure
        run: apiveritas init

      - name: Enable mock server mode in config.json
        run: |
          jq '.enableMockServer = true' apiveritas/config.json > temp && mv temp apiveritas/config.json
 

      - name: Install AWS CLI
        run: |
          pip install --upgrade pip
          pip install awscli

      - name: Start Mock Server
        run: npm run start:mock &

      - name: Run ApiVeritas config
        run: npx apiveritas config

      - name: Run ApiVeritas test
        run: npx apiveritas test --tests mock.json

      - name: Find latest payload folder
        id: find_payload
        run: |
          latest_folder=$(ls -td apiveritas/payloads/* | head -n 1)
          echo "Latest folder: $latest_folder"
          echo "folder=$latest_folder" >> $GITHUB_OUTPUT
      
      - name: Upload new payload to R2 (timestamped)
        run: |
          aws s3 cp "${{ steps.find_payload.outputs.folder }}/mock/" "s3://$R2_BUCKET/mock/$(basename ${{ steps.find_payload.outputs.folder }})/" \
            --recursive --endpoint-url $R2_ENDPOINT

      - name: List folders in R2 (mock)
        id: list_folders
        run: |
          echo "Listing folders in R2..."
          folder_list=$(aws s3 ls s3://$R2_BUCKET/mock/ --endpoint-url $R2_ENDPOINT | awk '{print $2}' | sed 's#/##' | sort)
          folder_count=$(echo "$folder_list" | wc -l)
      
          echo "Found $folder_count folders:"
          echo "$folder_list"
      
          latest=$(echo "$folder_list" | tail -n 1)
          previous=$(echo "$folder_list" | tail -n 2 | head -n 1)
      
          echo "Latest folder: $latest"
          echo "Previous folder: $previous"
      
          # Write outputs safely for GitHub Actions
          {
            printf "count=%s\n" "$folder_count"
            printf "latest=%s\n" "$latest"
            printf "previous=%s\n" "$previous"
          } >> "$GITHUB_OUTPUT"
          


      - name: Exit if only one folder.
        if: steps.list_folders.outputs.count == '1'
        run: |
          echo "Only one payload available in R2, skipping comparison."
          exit 0

      - name: Download latest and previous from R2
        if: steps.list_folders.outputs.count != '1'
        run: |
          mkdir -p payloads/latest/mock payloads/previous/mock
      
          aws s3 sync s3://$R2_BUCKET/mock/${{ steps.list_folders.outputs.latest }}/ payloads/latest/mock \
            --endpoint-url $R2_ENDPOINT
      
          aws s3 sync s3://$R2_BUCKET/mock/${{ steps.list_folders.outputs.previous }}/ payloads/previous/mock \
            --endpoint-url $R2_ENDPOINT
        
      - name: Run comparison between latest and previous
        run: |
          npx apiveritas compare --testSuite mock
      