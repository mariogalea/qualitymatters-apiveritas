name: ApiVeritas CI Run

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  contract-test:
    runs-on: ubuntu-latest

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_KEY }}
      AWS_DEFAULT_REGION: auto
      R2_BUCKET: ${{ secrets.R2_BUCKET }}
      R2_ENDPOINT: ${{ secrets.R2_ENDPOINT }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci

      - name: Build TypeScript
        run: npm run build

      - name: Link APIVERITAS with npm
        run: npm link

      - name: Initialise apiveritas folder structure
        run: apiveritas init

      - name: Enable mock server mode in config.json
        run: |
          jq '.enableMockServer = true' apiveritas/config.json > temp && mv temp apiveritas/config.json
 

      - name: Install AWS CLI
        run: |
          pip install --upgrade pip
          pip install awscli

      - name: Start Mock Server
        run: npm run start:mock &

      - name: Run ApiVeritas config
        run: npx apiveritas config

      - name: Run ApiVeritas test
        run: npx apiveritas test --tests mock.json

      - name: Find latest payload folder
        id: find_payload
        run: |
          latest_folder=$(ls -td apiveritas/payloads/* | head -n 1)
          echo "Latest folder: $latest_folder"
          echo "folder=$latest_folder" >> $GITHUB_OUTPUT
      
      - name: Upload new payloads to R2
        run: |
          export TIMESTAMP=$(ls apiveritas/payloads/mock | sort -r | head -n1)
          
          aws s3 sync apiveritas/payloads/mock/$TIMESTAMP/ \
            s3://apiveritas-payloads/mock/$TIMESTAMP/ \
            --endpoint-url $R2_ENDPOINT

      - name: List timestamped folders in R2
        id: list_folders
        run: |
          aws s3 ls s3://apiveritas-payloads/mock/ --endpoint-url $R2_ENDPOINT | awk '{print $2}' | sed 's#/##' | sort -r > folder_list.txt

          LATEST=$(head -n1 folder_list.txt)
          PREVIOUS=$(sed -n '2p' folder_list.txt)

          echo "latest=$LATEST" >> $GITHUB_OUTPUT
          echo "previous=$PREVIOUS" >> $GITHUB_OUTPUT


      - name: Download latest and previous payloads from R2
        run: |
          mkdir -p apiveritas/payloads/mock/${{ steps.list_folders.outputs.latest }}
          mkdir -p apiveritas/payloads/mock/${{ steps.list_folders.outputs.previous }}

          aws s3 sync s3://apiveritas-payloads/mock/${{ steps.list_folders.outputs.latest }}/ \
            apiveritas/payloads/${{ steps.list_folders.outputs.latest }} \
            --endpoint-url $R2_ENDPOINT

          aws s3 sync s3://apiveritas-payloads/mock/${{ steps.list_folders.outputs.previous }}/ \
            apiveritas/payloads/${{ steps.list_folders.outputs.previous }} \
            --endpoint-url $R2_ENDPOINT


      - name: Exit if only one folder.
        if: steps.list_folders.outputs.count == '1'
        run: |
          echo "Only one payload available in R2, skipping comparison."
          exit 0


      - name: Run comparison between latest and previous
        run: |
          npx apiveritas compare --testSuite mock
      